#!/bin/bash

show_temperature_info() {
    TEMP_INFO="\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏:\n\n"
    SENSORS_DATA=""

    if ! command -v sensors &>/dev/null; then
        TEMP_INFO+="–ü—Ä–æ–≥—Ä–∞–º–º–∞ 'sensors' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ lm-sensors:\n"
        TEMP_INFO+="sudo apt install lm-sensors\n"
        TEMP_INFO+="–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:\n"
        TEMP_INFO+="sudo sensors-detect --auto\n"
        whiptail --title "–û—à–∏–±–∫–∞" --msgbox "$TEMP_INFO" 20 70
        return 1
    fi

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞–º–∏
    SENSORS_DATA=$(sensors)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∏—Å—Ç–µ–º—ã
    if grep -q "k10temp" <<< "$SENSORS_DATA"; then
        SYSTEM_TYPE="AMD"
    elif grep -q "coretemp" <<< "$SENSORS_DATA"; then
        SYSTEM_TYPE="Intel"
    else
        SYSTEM_TYPE="Unknown"
    fi

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ CPU —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
    case $SYSTEM_TYPE in
        "AMD")
            CPU_TEMP=$(grep -A1 "k10temp" <<< "$SENSORS_DATA" | grep "temp1" | awk '{print $2}' | tr -d '+')
            [ -n "$CPU_TEMP" ] && TEMP_INFO+="üîπ CPU (AMD): $CPU_TEMP\n"
            ;;
        "Intel")
            CPU_TEMP=$(grep "Package id" <<< "$SENSORS_DATA" | awk '{print $4}' | tr -d '+')
            [ -z "$CPU_TEMP" ] && CPU_TEMP=$(grep "Core 0" <<< "$SENSORS_DATA" | awk '{print $3}' | tr -d '+')
            [ -n "$CPU_TEMP" ] && TEMP_INFO+="üîπ CPU (Intel): $CPU_TEMP\n"
            ;;
        *)
            CPU_TEMP=$(grep -E "CPU|Tdie" <<< "$SENSORS_DATA" | head -1 | awk '{print $2}' | tr -d '+')
            [ -n "$CPU_TEMP" ] && TEMP_INFO+="üîπ CPU: $CPU_TEMP\n"
            ;;
    esac

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ GPU —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
    if grep -q "radeon" <<< "$SENSORS_DATA"; then
        GPU_TEMP=$(grep -A1 "radeon" <<< "$SENSORS_DATA" | grep "temp1" | awk '{print $2}' | tr -d '+')
        [ -n "$GPU_TEMP" ] && [ "$GPU_TEMP" != "N/A" ] && TEMP_INFO+="üéÆ GPU (AMD): $GPU_TEMP\n"
    fi

    if grep -q "nouveau" <<< "$SENSORS_DATA"; then
        GPU_TEMP=$(grep "temp1" <<< "$SENSORS_DATA" | awk '{print $2}' | tr -d '+')
        [ -n "$GPU_TEMP" ] && TEMP_INFO+="üéÆ GPU (NVIDIA): $GPU_TEMP\n"
    fi

    if command -v nvidia-smi &>/dev/null; then
        GPU_TEMP=$(nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader)
        TEMP_INFO+="üéÆ GPU (NVIDIA): ${GPU_TEMP}¬∞C\n"
    fi

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
    if grep -q "acpitz" <<< "$SENSORS_DATA"; then
        SYS_TEMP=$(grep -A1 "acpitz" <<< "$SENSORS_DATA" | grep "temp1" | awk '{print $2}' | tr -d '+')
        [ -n "$SYS_TEMP" ] && TEMP_INFO+="üå°Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è: $SYS_TEMP\n"
    fi

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä NVMe
    if grep -q "nvme" <<< "$SENSORS_DATA"; then
        NVME_TEMP=$(grep "Composite" <<< "$SENSORS_DATA" | awk '{print $2}' | tr -d '+')
        [ -n "$NVME_TEMP" ] && TEMP_INFO+="üíæ NVMe: $NVME_TEMP\n"
    fi

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç—ã
    if grep -q "asus" <<< "$SENSORS_DATA"; then
        MB_TEMP=$(grep "motherboard" <<< "$SENSORS_DATA" | awk '{print $3}' | tr -d '+')
        [ -n "$MB_TEMP" ] && TEMP_INFO+="üñ•Ô∏è –ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞: $MB_TEMP\n"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞
    if [ $(echo -e "$TEMP_INFO" | wc -l) -le 4 ]; then
        TEMP_INFO+="\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ.\n"
        TEMP_INFO+="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å 'sudo sensors-detect --auto'\n"
        TEMP_INFO+="–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç."
    fi

    whiptail --title "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å–∏—Å—Ç–µ–º—ã" --scrolltext --msgbox "$TEMP_INFO" 25 80
}

show_system_info() {
    if [ -f /etc/os-release ]; then
        OS=$(grep '^PRETTY_NAME=' /etc/os-release | cut -d'=' -f2 | tr -d '"')
    else
        OS="–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    fi
    
    KERNEL=$(uname -r)
    UPTIME=$(uptime -p | sed 's/up //')
    PACKAGES=$( (dpkg --list 2>/dev/null || rpm -qa 2>/dev/null) | wc -l)
    SHELL=$(basename "$SHELL")
    RESOLUTION=$(xrandr --current 2>/dev/null | grep '*' | awk '{print $1}')
    TERMINAL=$(basename "$(ps -o comm= -p "$(($(ps -o ppid= -p "$(($(ps -o sid= -p "$$")))")))")")
    CPU=$(lscpu | grep "Model name" | cut -d':' -f2 | xargs)
    MEMORY=$(free -h | grep "Mem:" | awk '{print $3 "/" $2}')
    GPU=$(lspci | grep -i vga | cut -d':' -f3 | xargs)
    
    BATTERY_INFO=""
    if [ -d /sys/class/power_supply ]; then
        for battery in /sys/class/power_supply/*; do
            if [ -e "$battery/capacity" ]; then
                capacity=$(cat "$battery/capacity")
                status=$(cat "$battery/status" 2>/dev/null || echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                BATTERY_INFO+="–ë–∞—Ç–∞—Ä–µ—è $(basename $battery): $capacity% ($status)\n"
            fi
        done
    fi

    MESSAGE="
\"$USER@$HOSTNAME\"
------------
OS: $OS
Host: $(cat /sys/devices/virtual/dmi/id/product_name 2>/dev/null || echo "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
Kernel: $KERNEL
Uptime: $UPTIME
Packages: $PACKAGES
Shell: $SHELL $BASH_VERSION
"
    [ -n "$RESOLUTION" ] && MESSAGE+="Resolution: $RESOLUTION\n"
    MESSAGE+="Terminal: $TERMINAL\n"
    MESSAGE+="CPU: $CPU\n"
    MESSAGE+="GPU: $GPU\n"
    MESSAGE+="Memory: $MEMORY\n"
    [ -n "$BATTERY_INFO" ] && MESSAGE+="\n$BATTERY_INFO"
    MESSAGE=$(echo "$MESSAGE" | sed '/^[[:space:]]*$/d')
    whiptail --title "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ" --scrolltext --msgbox "$MESSAGE" 20 70
}

show_disk_info() {
    DISK_INFO=$(df -h)
    MESSAGE="
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö:
$DISK_INFO
"
    whiptail --title "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö" --scrolltext --msgbox "$MESSAGE" 20 70
}

show_network_info() {
    NETWORK_INFO=""
    INTERFACES=$(ip -o link show | awk '{print $2}' | sed 's/://')
    
    for interface in $INTERFACES; do
        [ "$interface" = "lo" ] && continue
        
        IP=$(ip -o addr show dev "$interface" | awk '/inet / {print $4}' | cut -d'/' -f1 | tr '\n' ', ' | sed 's/, $//')
        MAC=$(ip -o link show dev "$interface" | awk '{print $17}')
        SPEED=$(cat /sys/class/net/$interface/speed 2>/dev/null)
        STATUS=$(cat /sys/class/net/$interface/operstate 2>/dev/null)
        
        if [ -n "$IP" ] || [ -n "$MAC" ]; then
            NETWORK_INFO+="–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: $interface\n"
            NETWORK_INFO+="–°—Ç–∞—Ç—É—Å: ${STATUS:-–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ}\n"
            [ -n "$SPEED" ] && NETWORK_INFO+="–°–∫–æ—Ä–æ—Å—Ç—å: ${SPEED}Mbps\n"
            [ -n "$IP" ] && NETWORK_INFO+="IP: $IP\n"
            [ -n "$MAC" ] && NETWORK_INFO+="MAC: $MAC\n"
            NETWORK_INFO+="\n"
        fi
    done
    
    if [ -z "$NETWORK_INFO" ]; then
        NETWORK_INFO="–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ –∞–¥–∞–ø—Ç–µ—Ä—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"
    fi
    
    if command -v curl &>/dev/null; then
        PUBLIC_IP=$(curl -s ifconfig.me)
        [ -n "$PUBLIC_IP" ] && NETWORK_INFO+="\n–ü—É–±–ª–∏—á–Ω—ã–π IP: $PUBLIC_IP"
    fi
    
    whiptail --title "–°–µ—Ç—å" --scrolltext --msgbox "$NETWORK_INFO" 20 70
}

show_security_info() {
    if [ -d /sys/firmware/efi ]; then
        UEFI_STATUS="UEFI –≤–∫–ª—é—á–µ–Ω"
    else
        UEFI_STATUS="UEFI –æ—Ç–∫–ª—é—á–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Legacy BIOS)"
    fi
    
    if command -v tpm2_getcap &>/dev/null; then
        TPM_STATUS=$(tpm2_getcap properties-fixed 2>/dev/null | grep "TPM2_PT_FAMILY_INDICATOR" | awk '{print $2}')
        if [ "$TPM_STATUS" = "TPM2" ]; then
            TPM_STATUS="TPM 2.0 –¥–æ—Å—Ç—É–ø–µ–Ω"
        else
            TPM_STATUS="TPM 2.0 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        fi
    else
        TPM_STATUS="TPM 2.0 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ tpm2-tools)"
    fi
    
    if command -v ufw &>/dev/null; then
        UFW_STATUS=$(sudo ufw status | grep -v 'Status: inactive')
        [ -z "$UFW_STATUS" ] && UFW_STATUS="UFW –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω" || UFW_STATUS="UFW –∞–∫—Ç–∏–≤–µ–Ω"
    elif command -v firewall-cmd &>/dev/null; then
        UFW_STATUS=$(sudo firewall-cmd --state 2>/dev/null || echo "FirewallD –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
    else
        UFW_STATUS="–ë—Ä–∞–Ω–¥–º–∞—É—ç—Ä –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
    fi
    
    if command -v sestatus &>/dev/null; then
        SELINUX_STATUS=$(sestatus | grep "SELinux status" | cut -d':' -f2 | xargs)
    else
        SELINUX_STATUS="SELinux –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    if command -v apparmor_status &>/dev/null; then
        APPARMOR_STATUS=$(apparmor_status | grep -E 'profiles|processes')
        if echo "$APPARMOR_STATUS" | grep -q "0 profiles are loaded"; then
            APPARMOR_STATUS="AppArmor –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
        else
            APPARMOR_STATUS="AppArmor –∞–∫—Ç–∏–≤–µ–Ω"
        fi
    else
        APPARMOR_STATUS="AppArmor –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    if command -v clamscan &>/dev/null; then
        ANTIVIRUS_STATUS="ClamAV —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    elif command -v sophos &>/dev/null; then
        ANTIVIRUS_STATUS="Sophos —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        ANTIVIRUS_STATUS="–ê–Ω—Ç–∏–≤–∏—Ä—É—Å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
    fi
    
    if lsblk -o NAME,FSTYPE | grep -q "crypt"; then
        DISK_ENCRYPTION="–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–æ–≤ –≤–∫–ª—é—á–µ–Ω–æ"
    else
        DISK_ENCRYPTION="–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ"
    fi
    
    MESSAGE="
–°—Ç–∞—Ç—É—Å UEFI:               $UEFI_STATUS
–°—Ç–∞—Ç—É—Å TPM 2.0:            $TPM_STATUS
–°—Ç–∞—Ç—É—Å –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞:        $UFW_STATUS
–°—Ç–∞—Ç—É—Å SELinux:            $SELINUX_STATUS
–°—Ç–∞—Ç—É—Å AppArmor:           $APPARMOR_STATUS
–°—Ç–∞—Ç—É—Å –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–∞:         $ANTIVIRUS_STATUS
–°—Ç–∞—Ç—É—Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–æ–≤:  $DISK_ENCRYPTION
"
    whiptail --title "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏" --scrolltext --msgbox "$MESSAGE" 20 70
}

main_menu() {
    while true; do
        OPTION=$(whiptail --title "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" --menu "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:" 15 60 5 \
            "1" "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ" \
            "2" "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞" \
            "3" "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö" \
            "4" "–°–µ—Ç—å" \
            "5" "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å" \
            "0" "–í—ã—Ö–æ–¥" 3>&1 1>&2 2>&3)
        
        case $OPTION in
            1) show_system_info ;;
            2) show_temperature_info ;;
            3) show_disk_info ;;
            4) show_network_info ;;
            5) show_security_info ;;
            *) exit 0 ;;
        esac
    done
}

main_menu
